const audio = document.getElementById('beep');

class App extends React.Component {
  constructor(props) {
    super(props);
    this.loop = undefined;
  }
  
  
  state = {
    breakCount: 5,
    sessionCount: 25,
    clockCount: 25 * 60,
    currentTimer: 'Session',
    isPlaying: false
  }
  
  handlePlayPause = () => {
    const { isPlaying } = this.state;
    if (isPlaying) {
      clearInterval(this.loop);
      
      this.setState({
        isPlaying: false
      });
    }else{
      this.setState({
        isPlaying: true
      });
      
      this.loop = setInterval(() => {
        const {clockCount, 
               currentTimer, 
               breakCount, 
               sessionCount
              } = this.state;
        
        if(clockCount === 0) {
          this.setState({
            currentTimer: (currentTimer === 'Session') ? 'Break' : 'Session',
            clockCount: (currentTimer === 'Session')? (breakCount * 60) : (sessionCount * 60)
          });
          audio.play();
        }else{
          this.setState({
          clockCount: clockCount - 1
          });
        }
      }, 1000);  
    }
  }
  
  handleReset = () => {
    this.setState({
      breakCount: 5,
      sessionCount: 25,
      clockCount: 25 * 60,
      currentTimer: 'Session',
      isPlaying: false
    });
    clearInterval(this.loop);
    
    audio.pause();
    audio.currentTimer = 0;
  }
  
  componentWillUnmount() {
    clearInterval(this.loop);
  }
  
  convertToTime = (count) => {
    let minutes = Math.floor(count / 60);
    let seconds = count % 60;
    
    minutes = minutes < 10 ? ('0' + minutes) : minutes;
    seconds = seconds < 10 ? ('0' + seconds) : seconds;
    
    return `${minutes}:${seconds}`;
  }
  
  
  
  handleBreakDecrease = () => {
    const { breakCount, isPlaying, currentTimer } = this.state;
    if(breakCount > 1){  
      if(!isPlaying && currentTimer === 'Break') {
        this.setState({ 
          breakCount: breakCount - 1,
          clockCount: (breakCount - 1) * 60
        });
      } else {
        this.setState({
        breakCount: breakCount - 1
      });
      }
    } 
  }
  
  handleBreakIncrease = () => {
    const { breakCount, isPlaying, currentTimer } = this.state;
    if(breakCount < 60){  
      if(!isPlaying && currentTimer === 'Break') {
        this.setState({ 
          breakCount: breakCount + 1,
          clockCount: (breakCount + 1) * 60
        });
      } else {
        this.setState({
        breakCount: breakCount + 1
      });
      }
    } 
  }
  
  handleSessionDecrease = () => {
     const { sessionCount, isPlaying, currentTimer } = this.state;
    if(sessionCount > 1){  
      if(!isPlaying && currentTimer === 'Session') {
        this.setState({ 
          sessionCount: sessionCount - 1,
          clockCount: (sessionCount - 1) * 60
        });
      } else {
        this.setState({
        sessionCount: sessionCount - 1
      });
      }
    } 
  }
  
  handleSessionIncrease = () => {
   const { sessionCount, isPlaying, currentTimer } = this.state;
    if(sessionCount < 60){  
      if(!isPlaying && currentTimer === 'Session') {
        this.setState({ 
          sessionCount: sessionCount + 1,
          clockCount: (sessionCount + 1) * 60
        });
      } else {
        this.setState({
        sessionCount: sessionCount + 1
      });
      }
    }
  }
  
  
  render() {
    const {breakCount, 
           sessionCount, 
           clockCount, 
           currentTimer,
           isPlaying
          } = this.state;
    
    const breakProps = {
      title: 'Break',
      count: breakCount,
      handleIncrease: this.handleBreakIncrease,
      handleDecrease: this.handleBreakDecrease
    }
    const sessionProps = {
      title: 'Session',
      count: sessionCount,
      handleIncrease: this.handleSessionIncrease,
      handleDecrease: this.handleSessionDecrease
    }
    
    
    
    return (
      <div>
        <div className="flex">
          <SetTimer {...breakProps}/>
          <SetTimer {...sessionProps}/>
        </div>
        
        <div className="clock-container">
          <h1 id="timer-label">{currentTimer}</h1>
          <span>{this.convertToTime(clockCount)}</span>    
          <div className="flex">
            <button onClick={this.handlePlayPause} id="start_stop">▻ ||</button>
            <button onClick={this.handleReset} id="reset">⟳</button>
          </div>
        </div>
      </div>
    );
  }  
}

const SetTimer = (props) => {
  const id = props.title.toLowerCase();
  return (
    <div className="timer-container">
      <h2 id={`${id}--label`}>{props.title} Length</h2>
      <div className="flex actions-wrapper">
        <button onClick={props.handleDecrease} id={`${id}--decrement`}>-</button>
        <span id={`${id}--length`}>{props.count}</span>
        <button onClick={props.handleIncrease} id={`${id}--increment`}>+</button>
      </div>
    </div>
    );
  }
ReactDOM.render(<App/>, document.getElementById('app'));